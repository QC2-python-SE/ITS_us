{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Bell circuit\n",
    "\n",
    "By Ivan\n",
    "\n",
    "Bell states are an important example of the role of\n",
    "entanglement in quantum information. They are comprised of two entangled qubits, and\n",
    "measuring the observable $Z \\otimes Z$ on them guarantees\n",
    "the outcomes on each qubit will be totally correlated. This is true even if they are\n",
    "spacelike seperated, meaning that quantum mechanics is fundamentally nonlocal.\n",
    "\n",
    "In this notebook, we will demonstrate how to use `ITS_us` to investigate Bell\n",
    "states. We will first introduce the circuit, then demonstrate how to construct it using\n",
    "`ITS_us`. Finally we will perform a measurement on this state, showing that the\n",
    "state collapses upon measurement."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import sys\n",
    "sys.path.insert(0, os.path.abspath('../../'))\n",
    "\n",
    "from states import States, tp\n",
    "from gates import HGate, CNOTGate2\n",
    "from circuits import Circuits\n",
    "from numpy import sqrt, array\n",
    "import matplotlib.pyplot as plt\n",
    "seed = 1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Background\n",
    "\n",
    "We will consider the symmetric Bell state\n",
    "\n",
    "$$\n",
    "|\\Phi^+\\rangle = \\dfrac{1}{\\sqrt{2}}\\left(|\n",
    "00\\rangle + |11 \\rangle \\right)\n",
    "$$\n",
    "\n",
    "which may be constructed from the action of the circuit below on the state $\\mid 00\n",
    "\\rangle$:\n",
    "\n",
    "<!-- <div style=\"text-align: center;\">\n",
    "<img\n",
    "src=\"https://raw.githubusercontent.com/ivanshalashilin/assets_hosting/refs/heads/main/ITS_us/bell_circuit.png\"\n",
    "width=50% height=auto  class=\"center\" />\n",
    " </div> -->\n",
    "\n",
    "![](https://raw.githubusercontent.com/ivanshalashilin/assets_hosting/refs/heads/main/ITS_us/bell_circuit.png)\n",
    "\n",
    " \n",
    "The action on the $|00\\rangle$ state is as follows:\n",
    "\n",
    "$$\n",
    "|00\\rangle \\rightarrow H \\otimes \\mathbf{1}|00\\rangle = \\dfrac{1}{\\sqrt{2}}\\left(|\n",
    "00\\rangle + |10 \\rangle \\right)\n",
    "$$\n",
    "\n",
    "$$\n",
    "\\rightarrow \\text{CNOT} \\dfrac{1}{\\sqrt{2}}\\left(|\n",
    "00\\rangle + |10 \\rangle \\right) = \\dfrac{1}{\\sqrt{2}}\\left(|\n",
    "00\\rangle + |11 \\rangle \\right).\n",
    "$$\n",
    "\n",
    "Measuring in the observable $Z\\otimes Z$ corresponds to making a projective measurement\n",
    "in the computational basis. The projector onto state $|i\\rangle$ is \n",
    "\n",
    "$$\n",
    "P_i = |i\\rangle\\langle i|,~ i\\in \\{00,01,10,11\\}\n",
    "$$\n",
    "\n",
    "And the probability of a given outcome is given by \n",
    "\n",
    "$$\n",
    "\\langle \\Phi^+ | P_i | \\Phi^+ \\rangle =\n",
    "\\left\\{\\begin{array}{cl}\n",
    "\\frac{1}{2} & \\text {if } i=00,11 \\\\\n",
    "0 & \\text {if } i=10,01\n",
    "\\end{array}\\right.\n",
    "$$\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Constructing the circuit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "First we construct the $|00\\rangle$ state using the tensor product\n",
    "\n",
    "$$\n",
    "|0\\rangle \\otimes |0\\rangle = \\left(\\begin{array}{c}\n",
    "1 \\\\\n",
    "0\\\\\n",
    "\\end{array}\\right) \\otimes\n",
    "\\left(\\begin{array}{c}\n",
    "1 \\\\\n",
    "0\\\\\n",
    "\\end{array}\\right) \n",
    "= \n",
    "\\left(\\begin{array}{c}\n",
    "1 \\\\\n",
    "0\\\\\n",
    "0\\\\\n",
    "0\\\\\n",
    "\\end{array}\\right) \n",
    "$$\n",
    "\n",
    "We do this in `ITS_us` using the fucntion `tp` from the `states`\n",
    "module. We then pass the numarray into an instance of the `States` class, `zero_state`, specifying\n",
    "there are 2 qubits."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[1]\n",
      " [0]\n",
      " [0]\n",
      " [0]]\n"
     ]
    }
   ],
   "source": [
    "#perform tensor product\n",
    "zerozero_array = tp([1,0],[1,0])\n",
    "\n",
    "# pass the array into an instance of States\n",
    "zero_state = States(N=2, state=zerozero_array)\n",
    "print(zero_state.get_state())"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Next, we construct the circuit by calling an instance of the `Cicruits` class. We pass\n",
    "`zero_state` as the initial state, then sequentially add the circuit elements (from left\n",
    "to right), specifying which wires the gates act on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1],\n",
       "       [0],\n",
       "       [0],\n",
       "       [0]])"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit = Circuits(N_wires=2, state_init=zero_state)\n",
    "#Hadamard acts on the first wire, so we specify target_wire = 0\n",
    "circuit.add_single_qubit_gate(gate=HGate(),target_wire=0)\n",
    "#specifying control = 1 indicates the control qubit is the first qubit\n",
    "circuit.add_two_qubit_gate(gate = CNOTGate2(control=1), target_wires=[0,1])\n",
    "\n",
    "#check the initial state is |00>\n",
    "circuit.get_state_init()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now we run the circuit using the `run_circuit` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1.],\n",
       "       [0.],\n",
       "       [0.],\n",
       "       [1.]])"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "circuit.run_circuit()\n",
    "\n",
    "circuit.get_state_final() * sqrt(2)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After application of the circuit, we see that our state is indeed (up to normalisation)\n",
    "is indeed \n",
    "\n",
    "$$\n",
    "|00\\rangle + |11\\rangle = \n",
    "\\left(\\begin{array}{c}\n",
    "1 \\\\\n",
    "0\\\\\n",
    "0\\\\\n",
    "1\\\\\n",
    "\\end{array}\\right) \n",
    "$$"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Measuring the qubits\n",
    "\n",
    "Performing a measurement of $Z\\otimes Z$ registers uses the `measure_circuit` method.\n",
    "Post-measurement, the state collapses based on the outcome, which changes `state_final`\n",
    "of the class instance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Final measurement outcome is 00\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "array([1., 0., 0., 0.])"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#the collapse can be specified with a seed\n",
    "circuit.measure_qubits(seed=seed, print_outcome=True)\n",
    "circuit.get_state_final()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## State tomography\n",
    "\n",
    "If we have access to many copies of the Bell state, we may perform many measurements to\n",
    "build up the probability distribution. We may implement this in `ITS_us` by not\n",
    "specifying a random seed for our measurements"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "N_shots = 10000\n",
    "outcomes = {'|00>':0, '|11>': 0}\n",
    "\n",
    "zero_state = States(N=2, state=zerozero_array)\n",
    "for i in range(N_shots):\n",
    "    circuit = Circuits(N_wires=2, state_init=zero_state)\n",
    "    circuit.add_single_qubit_gate(gate=HGate(),target_wire=0)\n",
    "    circuit.add_two_qubit_gate(gate = CNOTGate2(control=1), target_wires=[0,1])\n",
    "    circuit.run_circuit()\n",
    "    #measure and record shot\n",
    "    final_state = circuit.measure_qubits(seed = i, print_outcome = False)\n",
    "    if (final_state.get_state() == array([1,0,0,0])).all():\n",
    "        outcomes['|00>']+=1\n",
    "    elif (final_state.get_state() == array([0,0,0,1])).all():\n",
    "        outcomes['|11>']+=1\n",
    "\n",
    "\n",
    "plt.bar(*zip(*outcomes.items()))\n",
    "plt.title(f'State tomography: {N_shots} shots')\n",
    "plt.show()\n",
    "\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "With 10000 shots we see the number of outcomes is almost identical, indicating we really\n",
    "do have a uniformly weighted Bell state. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "base",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.16"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
